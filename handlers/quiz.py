from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.openai_client import OpenAIClient
from keyboards.inline import get_quiz_topic_keyboard, get_quiz_after_keyboard
from config import IMAGE_PATHS, QUIZ_TOPICS
import logging
import aiofiles
import re

router = Router()
logger = logging.getLogger(__name__)
openai_client = OpenAIClient()


class QuizStates(StatesGroup):
    waiting_for_answer = State()


@router.message(Command("quiz"))
async def cmd_quiz(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz"""
    await start_quiz(message, state)


@router.callback_query(F.data == "quiz")
async def callback_quiz(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–≤–∏–∑–∞"""
    await callback.answer()
    await start_quiz(callback.message, state, is_callback=True)


async def start_quiz(message: Message, state: FSMContext, is_callback: bool = False):
    """–ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç–∞
        await state.update_data(quiz_score=0, quiz_total=0)

        caption = "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞:"

        try:
            async with aiofiles.open(IMAGE_PATHS['quiz'], 'rb') as photo:
                if is_callback:
                    await message.edit_media(
                        media=InputMediaPhoto(media=photo, caption=caption),
                        reply_markup=get_quiz_topic_keyboard()
                    )
                else:
                    await message.answer_photo(
                        photo=photo,
                        caption=caption,
                        reply_markup=get_quiz_topic_keyboard()
                    )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            if is_callback:
                await message.edit_text(
                    caption,
                    reply_markup=get_quiz_topic_keyboard()
                )
            else:
                await message.answer(
                    caption,
                    reply_markup=get_quiz_topic_keyboard()
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_quiz: {e}")


@router.callback_query(F.data.startswith("quiz_"))
async def select_quiz_topic(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã –∫–≤–∏–∑–∞"""
    await callback.answer()

    topic_key = callback.data.replace('quiz_', '')
    topic_name = QUIZ_TOPICS.get(topic_key, '–û–±—â–∞—è —Ç–µ–º–∞')

    await state.update_data(
        current_topic=topic_key,
        current_question=None,
        current_correct_answer=None
    )

    await ask_quiz_question(callback, state, topic_name)
    await state.set_state(QuizStates.waiting_for_answer)


async def ask_quiz_question(update: CallbackQuery | Message, state: FSMContext, topic_name: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞"""
    try:
        question_text = await openai_client.get_quiz_question(topic_name)

        # –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        question_match = re.search(r'–í–æ–ø—Ä–æ—Å:\s*(.+)', question_text)
        answer_match = re.search(r'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*(.+)', question_text)

        if question_match and answer_match:
            question = question_match.group(1).strip()
            correct_answer = answer_match.group(1).strip()

            await state.update_data(
                current_question=question,
                current_correct_answer=correct_answer
            )

            data = await state.get_data()
            score_text = f" (–°—á—ë—Ç: {data['quiz_score']}/{data['quiz_total']})" if data['quiz_total'] > 0 else ""

            question_text = f"‚ùì *–í–æ–ø—Ä–æ—Å:* {question}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:{score_text}"

            if isinstance(update, CallbackQuery):
                try:
                    await update.message.edit_caption(
                        caption=question_text,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å: {e}")
                    await update.message.edit_text(
                        text=question_text,
                        parse_mode='Markdown'
                    )
            else:
                await update.answer(
                    question_text,
                    parse_mode='Markdown'
                )
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_quiz_question: {e}")
        error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É."
        if isinstance(update, CallbackQuery):
            try:
                await update.message.edit_caption(caption=error_msg)
            except:
                await update.message.edit_text(text=error_msg)
        else:
            await update.answer(error_msg)


@router.message(QuizStates.waiting_for_answer, F.text)
async def handle_quiz_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
    user_answer = message.text
    data = await state.get_data()

    current_question = data.get('current_question')
    correct_answer = data.get('current_correct_answer')

    if not current_question or not correct_answer:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∫–≤–∏–∑ –∑–∞–Ω–æ–≤–æ.")
        return

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT
        validation = await openai_client.validate_quiz_answer(current_question, user_answer, correct_answer)

        quiz_total = data['quiz_total'] + 1

        if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" in validation:
            quiz_score = data['quiz_score'] + 1
            result_text = "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*"
        else:
            quiz_score = data['quiz_score']
            result_text = f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.* –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

        await state.update_data(quiz_score=quiz_score, quiz_total=quiz_total)

        score_text = f"\n\nüìä –°—á—ë—Ç: {quiz_score}/{quiz_total}"

        await message.answer(
            f"{result_text}{score_text}",
            reply_markup=get_quiz_after_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_quiz_answer: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=get_quiz_after_keyboard()
        )


@router.callback_query(F.data == "quiz_same_topic")
async def quiz_continue_same_topic(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–≤–∏–∑–∞ —Å —Ç–æ–π –∂–µ —Ç–µ–º–æ–π"""
    await callback.answer()

    data = await state.get_data()
    topic_key = data.get('current_topic', 'science')
    topic_name = QUIZ_TOPICS.get(topic_key, '–ù–∞—É–∫–∞')

    await ask_quiz_question(callback, state, topic_name)