from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.openai_client import OpenAIClient
from keyboards.inline import get_personality_keyboard, get_end_keyboard
from config import IMAGE_PATHS, PERSONALITIES
import logging
import aiofiles

router = Router()
logger = logging.getLogger(__name__)
openai_client = OpenAIClient()


class PersonalityStates(StatesGroup):
    waiting_for_message = State()


@router.message(Command("talk"))
async def cmd_talk(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /talk"""
    await start_personality_chat(message, state)


@router.callback_query(F.data == "talk")
async def callback_talk(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é"""
    await callback.answer()
    await start_personality_chat(callback.message, state, is_callback=True)


async def start_personality_chat(message: Message, state: FSMContext, is_callback: bool = False):
    """–ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    try:
        caption = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞:"

        try:
            async with aiofiles.open(IMAGE_PATHS['talk'], 'rb') as photo:
                if is_callback:
                    await message.edit_media(
                        media=InputMediaPhoto(media=photo, caption=caption),
                        reply_markup=get_personality_keyboard()
                    )
                else:
                    await message.answer_photo(
                        photo=photo,
                        caption=caption,
                        reply_markup=get_personality_keyboard()
                    )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            if is_callback:
                await message.edit_text(
                    caption,
                    reply_markup=get_personality_keyboard()
                )
            else:
                await message.answer(
                    caption,
                    reply_markup=get_personality_keyboard()
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_personality_chat: {e}")


@router.callback_query(F.data.startswith("personality_"))
async def select_personality(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏"""
    await callback.answer()

    personality_key = callback.data.replace('personality_', '')
    personality_name = {
        'einstein': '–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω',
        'shakespeare': '–£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä',
        'tesla': '–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞',
        'cleopatra': '–ö–ª–µ–æ–ø–∞—Ç—Ä–∞'
    }.get(personality_key, '–õ–∏—á–Ω–æ—Å—Ç—å')

    await state.update_data(
        current_personality=personality_key,
        personality_prompt=PERSONALITIES[personality_key]
    )

    caption = f"üë§ –¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å {personality_name}! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞
        await callback.message.edit_caption(
            caption=caption,
            reply_markup=get_end_keyboard()
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å: {e}")
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        try:
            await callback.message.edit_text(
                text=caption,
                reply_markup=get_end_keyboard()
            )
        except Exception as edit_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text=caption,
                reply_markup=get_end_keyboard()
            )

    await state.set_state(PersonalityStates.waiting_for_message)


@router.message(PersonalityStates.waiting_for_message, F.text)
async def handle_personality_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é"""
    user_message = message.text
    data = await state.get_data()

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    try:
        personality_prompt = data.get('personality_prompt', '')
        response = await openai_client.get_chat_response(user_message, personality_prompt)

        personality_name = {
            'einstein': '–≠–π–Ω—à—Ç–µ–π–Ω',
            'shakespeare': '–®–µ–∫—Å–ø–∏—Ä',
            'tesla': '–¢–µ—Å–ª–∞',
            'cleopatra': '–ö–ª–µ–æ–ø–∞—Ç—Ä–∞'
        }.get(data.get('current_personality', ''), '–õ–∏—á–Ω–æ—Å—Ç—å')

        await message.answer(
            f"üë§ *{personality_name}:*\n\n{response}",
            reply_markup=get_end_keyboard(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_personality_message: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_end_keyboard()
        )